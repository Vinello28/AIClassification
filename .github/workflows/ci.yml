name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies  
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e ".[dev]"
    
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
    
    - name: Test imports and basic functionality
      run: |
        python validate_refactoring.py
        python -c "from src.ai_classification.core.config import CATEGORIES; print(f'Loaded {len(CATEGORIES)} categories')"
    
    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      continue-on-error: true

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t ai-classification:test .
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name test-container -p 8001:8000 ai-classification:test
        
        # Wait for container to be ready
        sleep 30
        
        # Test health endpoint
        curl -f http://localhost:8001/ || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security checks
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
      continue-on-error: true